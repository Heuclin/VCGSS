// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// mySample
IntegerVector mySample(IntegerVector A, int n);
RcppExport SEXP _VCGSS_mySample(SEXP ASEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type A(ASEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(mySample(A, n));
    return rcpp_result_gen;
END_RCPP
}
// rInvGauss
double rInvGauss(double mu, double l);
RcppExport SEXP _VCGSS_rInvGauss(SEXP muSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type l(lSEXP);
    rcpp_result_gen = Rcpp::wrap(rInvGauss(mu, l));
    return rcpp_result_gen;
END_RCPP
}
// mmax
double mmax(double a, double b);
RcppExport SEXP _VCGSS_mmax(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(mmax(a, b));
    return rcpp_result_gen;
END_RCPP
}
// mmin
double mmin(double a, double b);
RcppExport SEXP _VCGSS_mmin(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(mmin(a, b));
    return rcpp_result_gen;
END_RCPP
}
// rmnorm
arma::vec rmnorm(arma::vec mean, arma::mat Sigma);
RcppExport SEXP _VCGSS_rmnorm(SEXP meanSEXP, SEXP SigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sigma(SigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(rmnorm(mean, Sigma));
    return rcpp_result_gen;
END_RCPP
}
// rmnormSvd
arma::vec rmnormSvd(arma::vec r, arma::vec mean, arma::mat V, arma::vec s);
RcppExport SEXP _VCGSS_rmnormSvd(SEXP rSEXP, SEXP meanSEXP, SEXP VSEXP, SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type r(rSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type V(VSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(rmnormSvd(r, mean, V, s));
    return rcpp_result_gen;
END_RCPP
}
// rmnormSvd2
arma::vec rmnormSvd2(arma::vec mean, arma::mat V, arma::vec s);
RcppExport SEXP _VCGSS_rmnormSvd2(SEXP meanSEXP, SEXP VSEXP, SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type V(VSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(rmnormSvd2(mean, V, s));
    return rcpp_result_gen;
END_RCPP
}
// sampleInt
Rcpp::IntegerVector sampleInt(int n, int min, int max);
RcppExport SEXP _VCGSS_sampleInt(SEXP nSEXP, SEXP minSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type min(minSEXP);
    Rcpp::traits::input_parameter< int >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(sampleInt(n, min, max));
    return rcpp_result_gen;
END_RCPP
}
// sumlogs
double sumlogs(double a, double b);
RcppExport SEXP _VCGSS_sumlogs(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(sumlogs(a, b));
    return rcpp_result_gen;
END_RCPP
}
// ssVcmCpp
List ssVcmCpp(arma::mat Y, arma::mat X, List settings, List init, std::string var_gp);
RcppExport SEXP _VCGSS_ssVcmCpp(SEXP YSEXP, SEXP XSEXP, SEXP settingsSEXP, SEXP initSEXP, SEXP var_gpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< List >::type settings(settingsSEXP);
    Rcpp::traits::input_parameter< List >::type init(initSEXP);
    Rcpp::traits::input_parameter< std::string >::type var_gp(var_gpSEXP);
    rcpp_result_gen = Rcpp::wrap(ssVcmCpp(Y, X, settings, init, var_gp));
    return rcpp_result_gen;
END_RCPP
}
// vcmCpp
List vcmCpp(arma::mat Y, arma::mat X, List settings, List init, std::string var_gp);
RcppExport SEXP _VCGSS_vcmCpp(SEXP YSEXP, SEXP XSEXP, SEXP settingsSEXP, SEXP initSEXP, SEXP var_gpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< List >::type settings(settingsSEXP);
    Rcpp::traits::input_parameter< List >::type init(initSEXP);
    Rcpp::traits::input_parameter< std::string >::type var_gp(var_gpSEXP);
    rcpp_result_gen = Rcpp::wrap(vcmCpp(Y, X, settings, init, var_gp));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_VCGSS_mySample", (DL_FUNC) &_VCGSS_mySample, 2},
    {"_VCGSS_rInvGauss", (DL_FUNC) &_VCGSS_rInvGauss, 2},
    {"_VCGSS_mmax", (DL_FUNC) &_VCGSS_mmax, 2},
    {"_VCGSS_mmin", (DL_FUNC) &_VCGSS_mmin, 2},
    {"_VCGSS_rmnorm", (DL_FUNC) &_VCGSS_rmnorm, 2},
    {"_VCGSS_rmnormSvd", (DL_FUNC) &_VCGSS_rmnormSvd, 4},
    {"_VCGSS_rmnormSvd2", (DL_FUNC) &_VCGSS_rmnormSvd2, 3},
    {"_VCGSS_sampleInt", (DL_FUNC) &_VCGSS_sampleInt, 3},
    {"_VCGSS_sumlogs", (DL_FUNC) &_VCGSS_sumlogs, 2},
    {"_VCGSS_ssVcmCpp", (DL_FUNC) &_VCGSS_ssVcmCpp, 5},
    {"_VCGSS_vcmCpp", (DL_FUNC) &_VCGSS_vcmCpp, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_VCGSS(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
